syntax = "proto3";
package rrocker.api;

/// A handle for our task, contains an UUIDv4
message TaskHandle {
    string uuid = 1;
}

/// Memory and CPU constraints for a task. Best effort constraints so 
/// values above what the host can offer will mean *no* constraints
message ResourceConstraints {
    int32 max_cpu = 1; //CPU % of all cores on daemon host (1-100)
    int32 max_mem_bytes = 2;  //memory in bytes
}

/// A message encoding the start task request.
/// `cmd` is required while `args` and `constraints` are optional
message StartTaskRequest {
    /// cmd should be an absolute path
    string cmd = 1; 
    repeated string args = 2;
    ResourceConstraints constraints = 3;
}

/// Task start reply containing a task handle
message StartTaskReply {
    TaskHandle handle = 1;
}

/// Designates which pipe the program output came from
enum OutputStream {
    Stdin = 0; //never used but let's be consistent with the linux api
    Stdout = 1;
    Stderr = 2;
}

/// Task output with a line of output plus which pipe it came from
message TaskOutput {
    string line = 1;
    OutputStream stream = 2;
}

/// Enum describing the status of a task
enum TaskStatus {
    TASK_COMPLETED = 0;
    TASK_RUNNING = 1;
    TASK_KILLED = 2;    
}

/// The task's state is encoded as a status and an exit code if set by the task
message TaskState {
    TaskStatus status = 1;
    int32 code = 2;
}

/// Reply message of the task query command containing the state
message QueryTaskReply {
    TaskState state = 1;
}

/// The message streamed when requesting a task's output.
/// Each message will either be some output or a state indicating termination.
message TaskOutputReply {
    oneof result {
        TaskOutput output = 1;
        TaskState state = 2;
    }
}

/// Scheduler service used to run isolated and constrained tasks on a daemon
service Scheduler {
    /// StartTask returns either a task handle on success or one of the following error codes:
    /// NOT_FOUND: If the command couldn't be found in the base image 
    /// INVALID_ARGUMENT: If any of the resource constraints are negative
    rpc StartTask (StartTaskRequest) returns (StartTaskReply);
    
    /// StopTask returns either an empty message on success or one of the following error codes:
    /// NOT_FOUND: If the task handle doesn't exist
    /// FAILED_PRECONDITION: If the task is already dead
    rpc StopTask (TaskHandle) returns (google.protobuf.Empty);

    /// QueryTask returns either the task state or one of the following error codes:
    /// NOT_FOUND: If the task handle doesn't exist
    rpc QueryTask (TaskHandle) returns (QueryTaskReply);
    
    /// QueryTask returns a stream of output or one of the following error codes:
    /// NOT_FOUND: If the task handle doesn't exist
    rpc TaskOutputStream (TaskHandle) returns (stream TaskOutputReply);
}
